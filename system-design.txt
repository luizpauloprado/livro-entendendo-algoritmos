Gerenciamento de estado de forma reativa

- O que é o estado da UI?
- Como os eventos funcionam?
- Como gerenciar?
- Como isso impacta na tetabilidade e na qualidade dos apps?

Examplos:
Loading infinito
Dado incorreto
=
Gerenciamento incorreto da UI

>>> O que é o estado da UI?

Estados:
Inicial (empty)
Loading
Error
Success
Empty

Mais complexa a tela, mais importante o estado (como dados vindo de varias fontes).
Importante ser reativo.

• Código mais limpo e declarativo.
• Interface sempre sincronizada com o estado evitando manipulações manuais.
• Evita bugs (loading infinito, atualizações fora de ordem).
• Facilidade de testar: o estado como uma entidade separada facilita simular os cenários de testes.
• Fluxo de dados mais claro (evento -> mudança de estado -> view atualizada).
• Melhor compatibilidade com frameworks de view declarativa como Jetpack Compose e SwifUl.
• Integração com fluxos assíncronos (coroutines, stateflow, combine, async-await).
• Organização arquitetural: se encaixa bem com padrões como MVI*, MVVM e Clean

* MVI, or Model-View-Intent, is an architectural pattern for Android development that promotes unidirectional data flow and clear separation of concerns. 
It focuses on managing the application's state through a single source of truth (the Model), 
handling user interactions through Intents, and updating the UI (View) based on state changes. 

==== iOS: @Published 

Pontos:
Imutabilidade (usar o estado anterior e atualizar somente o que mudou, estado alterado por mais de um lugar)
Separação de camadas e responsabildiade (desacoplado)
Cancelamento de fluxos (ex: stream, causar memory leak, receber dato em tela inativa)
Testabilidade (mock do estado, fake repository gerando um dado)
Armadilhas (loading infinito - sem time out, estados conflitantes - varias fontes atualizando a mesma coisas - memory leak)

StateFlow = Android
iOS = Combine

-

RN:
Lib redux
State padrão da linguagem
Já usei um container com state que fazia chamadas para API, a view vinha dentro esse container, sempre

Flutter:
Lib provider = Provider / consumer = future provider e o stream provider
Bloc
MobX (nunca usei)
Já usei listener
Já usei stream

Estado nativo pra tela contida
Estado de flow usando alguma lib, stream, etc

Clojure
Riverpod (usa os conceitos de provider)

Sobre a aula:
Não conhecia o MVI

---

Trade offs